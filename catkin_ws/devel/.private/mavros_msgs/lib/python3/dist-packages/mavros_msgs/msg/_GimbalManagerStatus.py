# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from mavros_msgs/GimbalManagerStatus.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class GimbalManagerStatus(genpy.Message):
  _md5sum = "fc335d636c5417cf82ed6184846e75a1"
  _type = "mavros_msgs/GimbalManagerStatus"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """# MAVLink message: GIMBAL_MANAGER_STATUS
# https://mavlink.io/en/messages/common.html#GIMBAL_MANAGER_STATUS

std_msgs/Header header

uint32 flags                # High level gimbal manager flags to use - See GIMBAL_MANAGER_FLAGS
#GIMBAL_MANAGER_FLAGS
uint32 GIMBAL_MANAGER_FLAGS_RETRACT = 1     # Based on GIMBAL_DEVICE_FLAGS_RETRACT
uint32 GIMBAL_MANAGER_FLAGS_NEUTRAL = 2     # Based on GIMBAL_DEVICE_FLAGS_NEUTRAL
uint32 GIMBAL_MANAGER_FLAGS_ROLL_LOCK = 4   # Based on GIMBAL_DEVICE_FLAGS_ROLL_LOCK
uint32 GIMBAL_MANAGER_FLAGS_PITCH_LOCK = 8  # Based on GIMBAL_DEVICE_FLAGS_PITCH_LOCK
uint32 GIMBAL_MANAGER_FLAGS_YAW_LOCK = 16   # Based on GIMBAL_DEVICE_FLAGS_YAW_LOCK

uint8 gimbal_device_id # Gimbal device ID that this gimbal manager is responsible for.

uint8 sysid_primary     # System ID of MAVLink component with primary control, 0 for none.
uint8 compid_primary    # Component ID of MAVLink component with primary control, 0 for none.
uint8 sysid_secondary   # System ID of MAVLink component with secondary control, 0 for none.
uint8 compid_secondary  # Component ID of MAVLink component with secondary control, 0 for none.
================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id
"""
  # Pseudo-constants
  GIMBAL_MANAGER_FLAGS_RETRACT = 1
  GIMBAL_MANAGER_FLAGS_NEUTRAL = 2
  GIMBAL_MANAGER_FLAGS_ROLL_LOCK = 4
  GIMBAL_MANAGER_FLAGS_PITCH_LOCK = 8
  GIMBAL_MANAGER_FLAGS_YAW_LOCK = 16

  __slots__ = ['header','flags','gimbal_device_id','sysid_primary','compid_primary','sysid_secondary','compid_secondary']
  _slot_types = ['std_msgs/Header','uint32','uint8','uint8','uint8','uint8','uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,flags,gimbal_device_id,sysid_primary,compid_primary,sysid_secondary,compid_secondary

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(GimbalManagerStatus, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.flags is None:
        self.flags = 0
      if self.gimbal_device_id is None:
        self.gimbal_device_id = 0
      if self.sysid_primary is None:
        self.sysid_primary = 0
      if self.compid_primary is None:
        self.compid_primary = 0
      if self.sysid_secondary is None:
        self.sysid_secondary = 0
      if self.compid_secondary is None:
        self.compid_secondary = 0
    else:
      self.header = std_msgs.msg.Header()
      self.flags = 0
      self.gimbal_device_id = 0
      self.sysid_primary = 0
      self.compid_primary = 0
      self.sysid_secondary = 0
      self.compid_secondary = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_I5B().pack(_x.flags, _x.gimbal_device_id, _x.sysid_primary, _x.compid_primary, _x.sysid_secondary, _x.compid_secondary))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 9
      (_x.flags, _x.gimbal_device_id, _x.sysid_primary, _x.compid_primary, _x.sysid_secondary, _x.compid_secondary,) = _get_struct_I5B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_I5B().pack(_x.flags, _x.gimbal_device_id, _x.sysid_primary, _x.compid_primary, _x.sysid_secondary, _x.compid_secondary))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 9
      (_x.flags, _x.gimbal_device_id, _x.sysid_primary, _x.compid_primary, _x.sysid_secondary, _x.compid_secondary,) = _get_struct_I5B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_I5B = None
def _get_struct_I5B():
    global _struct_I5B
    if _struct_I5B is None:
        _struct_I5B = struct.Struct("<I5B")
    return _struct_I5B
