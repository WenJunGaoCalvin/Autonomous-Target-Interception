# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from mavros_msgs/GimbalDeviceAttitudeStatus.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import std_msgs.msg

class GimbalDeviceAttitudeStatus(genpy.Message):
  _md5sum = "1fa324570393b1fbb776c5ff6e00764e"
  _type = "mavros_msgs/GimbalDeviceAttitudeStatus"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """# MAVLink message: GIMBAL_DEVICE_ATTITUDE_STATUS
# https://mavlink.io/en/messages/common.html#GIMBAL_DEVICE_ATTITUDE_STATUS

std_msgs/Header header

uint8 target_system             # System ID
uint8 target_component          # Component ID

uint16 flags                    # Current gimbal flags set (bitwise) - See GIMBAL_DEVICE_FLAGS
#GIMBAL_DEVICE_FLAGS
uint16 GIMBAL_DEVICE_FLAGS_RETRACT = 1      # Set to retracted safe position (no stabilization), takes presedence over all other flags.
uint16 GIMBAL_DEVICE_FLAGS_NEUTRAL = 2      # Set to neutral/default position, taking precedence over all other flags except RETRACT. Neutral is commonly forward-facing and horizontal (pitch=yaw=0) but may be any orientation.
uint16 GIMBAL_DEVICE_FLAGS_ROLL_LOCK = 4    # Lock roll angle to absolute angle relative to horizon (not relative to drone). This is generally the default with a stabilizing gimbal.
uint16 GIMBAL_DEVICE_FLAGS_PITCH_LOCK = 8   # Lock pitch angle to absolute angle relative to horizon (not relative to drone). This is generally the default.
uint16 GIMBAL_DEVICE_FLAGS_YAW_LOCK = 16    # Lock yaw angle to absolute angle relative to North (not relative to drone). If this flag is set, the quaternion is in the Earth frame with the x-axis pointing North (yaw absolute). If this flag is not set, the quaternion frame is in the Earth frame rotated so that the x-axis is pointing forward (yaw relative to vehicle).

geometry_msgs/Quaternion q      # Quaternion, x, y, z, w (0 0 0 1 is the null-rotation, the frame is depends on whether the flag GIMBAL_DEVICE_FLAGS_YAW_LOCK is set)
float32 angular_velocity_x      # X component of angular velocity (NaN if unknown)
float32 angular_velocity_y      # Y component of angular velocity (NaN if unknown)
float32 angular_velocity_z      # Z component of angular velocity (NaN if unknown)

uint32 failure_flags            # Failure flags (0 for no failure) (bitwise) - See GIMBAL_DEVICE_ERROR_FLAGS
#GIMBAL_DEVICE_ERROR_FLAGS
uint32 GIMBAL_DEVICE_ERROR_FLAGS_AT_ROLL_LIMIT = 1          # Gimbal device is limited by hardware roll limit.
uint32 GIMBAL_DEVICE_ERROR_FLAGS_AT_PITCH_LIMIT = 2         # Gimbal device is limited by hardware pitch limit.
uint32 GIMBAL_DEVICE_ERROR_FLAGS_AT_YAW_LIMIT = 4           # Gimbal device is limited by hardware yaw limit.
uint32 GIMBAL_DEVICE_ERROR_FLAGS_ENCODER_ERROR = 8          # There is an error with the gimbal encoders.
uint32 GIMBAL_DEVICE_ERROR_FLAGS_POWER_ERROR = 16           # There is an error with the gimbal power source.
uint32 GIMBAL_DEVICE_ERROR_FLAGS_MOTOR_ERROR = 32           # There is an error with the gimbal motor's.
uint32 GIMBAL_DEVICE_ERROR_FLAGS_SOFTWARE_ERROR = 64        # There is an error with the gimbal's software.
uint32 GIMBAL_DEVICE_ERROR_FLAGS_COMMS_ERROR = 128          # There is an error with the gimbal's communication.
uint32 GIMBAL_DEVICE_ERROR_FLAGS_CALIBRATION_RUNNING = 256  # Gimbal is currently calibrating.

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w
"""
  # Pseudo-constants
  GIMBAL_DEVICE_FLAGS_RETRACT = 1
  GIMBAL_DEVICE_FLAGS_NEUTRAL = 2
  GIMBAL_DEVICE_FLAGS_ROLL_LOCK = 4
  GIMBAL_DEVICE_FLAGS_PITCH_LOCK = 8
  GIMBAL_DEVICE_FLAGS_YAW_LOCK = 16
  GIMBAL_DEVICE_ERROR_FLAGS_AT_ROLL_LIMIT = 1
  GIMBAL_DEVICE_ERROR_FLAGS_AT_PITCH_LIMIT = 2
  GIMBAL_DEVICE_ERROR_FLAGS_AT_YAW_LIMIT = 4
  GIMBAL_DEVICE_ERROR_FLAGS_ENCODER_ERROR = 8
  GIMBAL_DEVICE_ERROR_FLAGS_POWER_ERROR = 16
  GIMBAL_DEVICE_ERROR_FLAGS_MOTOR_ERROR = 32
  GIMBAL_DEVICE_ERROR_FLAGS_SOFTWARE_ERROR = 64
  GIMBAL_DEVICE_ERROR_FLAGS_COMMS_ERROR = 128
  GIMBAL_DEVICE_ERROR_FLAGS_CALIBRATION_RUNNING = 256

  __slots__ = ['header','target_system','target_component','flags','q','angular_velocity_x','angular_velocity_y','angular_velocity_z','failure_flags']
  _slot_types = ['std_msgs/Header','uint8','uint8','uint16','geometry_msgs/Quaternion','float32','float32','float32','uint32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,target_system,target_component,flags,q,angular_velocity_x,angular_velocity_y,angular_velocity_z,failure_flags

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(GimbalDeviceAttitudeStatus, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.target_system is None:
        self.target_system = 0
      if self.target_component is None:
        self.target_component = 0
      if self.flags is None:
        self.flags = 0
      if self.q is None:
        self.q = geometry_msgs.msg.Quaternion()
      if self.angular_velocity_x is None:
        self.angular_velocity_x = 0.
      if self.angular_velocity_y is None:
        self.angular_velocity_y = 0.
      if self.angular_velocity_z is None:
        self.angular_velocity_z = 0.
      if self.failure_flags is None:
        self.failure_flags = 0
    else:
      self.header = std_msgs.msg.Header()
      self.target_system = 0
      self.target_component = 0
      self.flags = 0
      self.q = geometry_msgs.msg.Quaternion()
      self.angular_velocity_x = 0.
      self.angular_velocity_y = 0.
      self.angular_velocity_z = 0.
      self.failure_flags = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2BH4d3fI().pack(_x.target_system, _x.target_component, _x.flags, _x.q.x, _x.q.y, _x.q.z, _x.q.w, _x.angular_velocity_x, _x.angular_velocity_y, _x.angular_velocity_z, _x.failure_flags))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.q is None:
        self.q = geometry_msgs.msg.Quaternion()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 52
      (_x.target_system, _x.target_component, _x.flags, _x.q.x, _x.q.y, _x.q.z, _x.q.w, _x.angular_velocity_x, _x.angular_velocity_y, _x.angular_velocity_z, _x.failure_flags,) = _get_struct_2BH4d3fI().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2BH4d3fI().pack(_x.target_system, _x.target_component, _x.flags, _x.q.x, _x.q.y, _x.q.z, _x.q.w, _x.angular_velocity_x, _x.angular_velocity_y, _x.angular_velocity_z, _x.failure_flags))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.q is None:
        self.q = geometry_msgs.msg.Quaternion()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 52
      (_x.target_system, _x.target_component, _x.flags, _x.q.x, _x.q.y, _x.q.z, _x.q.w, _x.angular_velocity_x, _x.angular_velocity_y, _x.angular_velocity_z, _x.failure_flags,) = _get_struct_2BH4d3fI().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2BH4d3fI = None
def _get_struct_2BH4d3fI():
    global _struct_2BH4d3fI
    if _struct_2BH4d3fI is None:
        _struct_2BH4d3fI = struct.Struct("<2BH4d3fI")
    return _struct_2BH4d3fI
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
