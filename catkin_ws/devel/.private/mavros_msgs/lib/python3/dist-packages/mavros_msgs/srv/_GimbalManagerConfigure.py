# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from mavros_msgs/GimbalManagerConfigureRequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class GimbalManagerConfigureRequest(genpy.Message):
  _md5sum = "68c32f3cd41fdfa83d7b863c5f5f2cb5"
  _type = "mavros_msgs/GimbalManagerConfigureRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# MAVLink command: DO_GIMBAL_MANAGER_CONFIGURE
# https://mavlink.io/en/messages/common.html#MAV_CMD_DO_GIMBAL_MANAGER_CONFIGURE
# Note: default MAV_COMP_ID_ONBOARD_COMPUTER = 191, see MAV_COMPONENT documentation
# https://mavlink.io/en/messages/common.html#MAV_COMPONENT

int16 sysid_primary      # Sysid for primary control (0: no one in control, 
                        # -1: leave unchanged, -2: set itself in control 
                        # (for missions where the own sysid is still unknown), 
                        # -3: remove control if currently in control).
int16 compid_primary     # Compid for primary control (0: no one in control, 
                        # -1: leave unchanged, -2: set itself in control 
                        # (for missions where the own sysid is still unknown), 
                        # -3: remove control if currently in control).
int16 sysid_secondary    # Sysid for secondary control (0: no one in control, 
                        # -1: leave unchanged, -2: set itself in control 
                        # (for missions where the own sysid is still unknown), 
                        # -3: remove control if currently in control).
int16 compid_secondary   # Compid for secondary control (0: no one in control, 
                        # -1: leave unchanged, -2: set itself in control 
                        # (for missions where the own sysid is still unknown), 
                        # -3: remove control if currently in control).

uint8 gimbal_device_id  # Component ID of gimbal device to address 
                        # (or 1-6 for non-MAVLink gimbal), 0 for all gimbal device
                        # components. Send command multiple times for more than
                        # one gimbal (but not all gimbals).
                        # Note: Default Mavlink gimbal device ids: 154, 171-175

"""
  __slots__ = ['sysid_primary','compid_primary','sysid_secondary','compid_secondary','gimbal_device_id']
  _slot_types = ['int16','int16','int16','int16','uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       sysid_primary,compid_primary,sysid_secondary,compid_secondary,gimbal_device_id

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(GimbalManagerConfigureRequest, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.sysid_primary is None:
        self.sysid_primary = 0
      if self.compid_primary is None:
        self.compid_primary = 0
      if self.sysid_secondary is None:
        self.sysid_secondary = 0
      if self.compid_secondary is None:
        self.compid_secondary = 0
      if self.gimbal_device_id is None:
        self.gimbal_device_id = 0
    else:
      self.sysid_primary = 0
      self.compid_primary = 0
      self.sysid_secondary = 0
      self.compid_secondary = 0
      self.gimbal_device_id = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_4hB().pack(_x.sysid_primary, _x.compid_primary, _x.sysid_secondary, _x.compid_secondary, _x.gimbal_device_id))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 9
      (_x.sysid_primary, _x.compid_primary, _x.sysid_secondary, _x.compid_secondary, _x.gimbal_device_id,) = _get_struct_4hB().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_4hB().pack(_x.sysid_primary, _x.compid_primary, _x.sysid_secondary, _x.compid_secondary, _x.gimbal_device_id))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 9
      (_x.sysid_primary, _x.compid_primary, _x.sysid_secondary, _x.compid_secondary, _x.gimbal_device_id,) = _get_struct_4hB().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_4hB = None
def _get_struct_4hB():
    global _struct_4hB
    if _struct_4hB is None:
        _struct_4hB = struct.Struct("<4hB")
    return _struct_4hB
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from mavros_msgs/GimbalManagerConfigureResponse.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class GimbalManagerConfigureResponse(genpy.Message):
  _md5sum = "1cd894375e4e3d2861d2222772894fdb"
  _type = "mavros_msgs/GimbalManagerConfigureResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """bool success
# raw result returned by COMMAND_ACK
uint8 result
"""
  __slots__ = ['success','result']
  _slot_types = ['bool','uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       success,result

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(GimbalManagerConfigureResponse, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.success is None:
        self.success = False
      if self.result is None:
        self.result = 0
    else:
      self.success = False
      self.result = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2B().pack(_x.success, _x.result))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 2
      (_x.success, _x.result,) = _get_struct_2B().unpack(str[start:end])
      self.success = bool(self.success)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2B().pack(_x.success, _x.result))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 2
      (_x.success, _x.result,) = _get_struct_2B().unpack(str[start:end])
      self.success = bool(self.success)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2B = None
def _get_struct_2B():
    global _struct_2B
    if _struct_2B is None:
        _struct_2B = struct.Struct("<2B")
    return _struct_2B
class GimbalManagerConfigure(object):
  _type          = 'mavros_msgs/GimbalManagerConfigure'
  _md5sum = '33077e29a7a8218a30def4cf603efdb4'
  _request_class  = GimbalManagerConfigureRequest
  _response_class = GimbalManagerConfigureResponse
