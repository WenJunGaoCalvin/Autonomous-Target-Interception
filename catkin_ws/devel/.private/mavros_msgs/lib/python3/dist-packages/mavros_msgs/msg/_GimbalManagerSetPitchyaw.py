# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from mavros_msgs/GimbalManagerSetPitchyaw.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class GimbalManagerSetPitchyaw(genpy.Message):
  _md5sum = "1167a6666ca24e39fb8a2101fd672d21"
  _type = "mavros_msgs/GimbalManagerSetPitchyaw"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# MAVLink message: GIMBAL_MANAGER_SET_PITCHYAW
# https://mavlink.io/en/messages/common.html#GIMBAL_MANAGER_SET_PITCHYAW
# Note that this message structure is identical also to GIMBAL_MANAGER_SET_MANUAL_CONTROL and is 
# reused as such by the plugin
# https://mavlink.io/en/messages/common.html#GIMBAL_MANAGER_SET_MANUAL_CONTROL

uint8 target_system         # System ID
uint8 target_component      # Component ID

uint32 flags                # High level gimbal manager flags to use - See GIMBAL_MANAGER_FLAGS
#GIMBAL_MANAGER_FLAGS
uint32 GIMBAL_MANAGER_FLAGS_RETRACT = 1     # Based on GIMBAL_DEVICE_FLAGS_RETRACT
uint32 GIMBAL_MANAGER_FLAGS_NEUTRAL = 2     # Based on GIMBAL_DEVICE_FLAGS_NEUTRAL
uint32 GIMBAL_MANAGER_FLAGS_ROLL_LOCK = 4   # Based on GIMBAL_DEVICE_FLAGS_ROLL_LOCK
uint32 GIMBAL_MANAGER_FLAGS_PITCH_LOCK = 8  # Based on GIMBAL_DEVICE_FLAGS_PITCH_LOCK
uint32 GIMBAL_MANAGER_FLAGS_YAW_LOCK = 16   # Based on GIMBAL_DEVICE_FLAGS_YAW_LOCK

uint8 gimbal_device_id  # Component ID of gimbal device to address 
                        # (or 1-6 for non-MAVLink gimbal), 0 for all gimbal device
                        # components. Send command multiple times for more than
                        # one gimbal (but not all gimbals).  Default Mavlink gimbal 
                        # device ids: 154, 171-175

float32 pitch # Pitch angle (positive: up, negative: down, NaN to be ignored).
float32 yaw # Yaw angle (positive: to the right, negative: to the left, NaN to be ignored).
float32 pitch_rate # Pitch angular rate (positive: up, negative: down, NaN to be ignored).
float32 yaw_rate # Yaw angular rate (positive: to the right, negative: to the left, NaN to be ignored)."""
  # Pseudo-constants
  GIMBAL_MANAGER_FLAGS_RETRACT = 1
  GIMBAL_MANAGER_FLAGS_NEUTRAL = 2
  GIMBAL_MANAGER_FLAGS_ROLL_LOCK = 4
  GIMBAL_MANAGER_FLAGS_PITCH_LOCK = 8
  GIMBAL_MANAGER_FLAGS_YAW_LOCK = 16

  __slots__ = ['target_system','target_component','flags','gimbal_device_id','pitch','yaw','pitch_rate','yaw_rate']
  _slot_types = ['uint8','uint8','uint32','uint8','float32','float32','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       target_system,target_component,flags,gimbal_device_id,pitch,yaw,pitch_rate,yaw_rate

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(GimbalManagerSetPitchyaw, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.target_system is None:
        self.target_system = 0
      if self.target_component is None:
        self.target_component = 0
      if self.flags is None:
        self.flags = 0
      if self.gimbal_device_id is None:
        self.gimbal_device_id = 0
      if self.pitch is None:
        self.pitch = 0.
      if self.yaw is None:
        self.yaw = 0.
      if self.pitch_rate is None:
        self.pitch_rate = 0.
      if self.yaw_rate is None:
        self.yaw_rate = 0.
    else:
      self.target_system = 0
      self.target_component = 0
      self.flags = 0
      self.gimbal_device_id = 0
      self.pitch = 0.
      self.yaw = 0.
      self.pitch_rate = 0.
      self.yaw_rate = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2BIB4f().pack(_x.target_system, _x.target_component, _x.flags, _x.gimbal_device_id, _x.pitch, _x.yaw, _x.pitch_rate, _x.yaw_rate))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 23
      (_x.target_system, _x.target_component, _x.flags, _x.gimbal_device_id, _x.pitch, _x.yaw, _x.pitch_rate, _x.yaw_rate,) = _get_struct_2BIB4f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2BIB4f().pack(_x.target_system, _x.target_component, _x.flags, _x.gimbal_device_id, _x.pitch, _x.yaw, _x.pitch_rate, _x.yaw_rate))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 23
      (_x.target_system, _x.target_component, _x.flags, _x.gimbal_device_id, _x.pitch, _x.yaw, _x.pitch_rate, _x.yaw_rate,) = _get_struct_2BIB4f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2BIB4f = None
def _get_struct_2BIB4f():
    global _struct_2BIB4f
    if _struct_2BIB4f is None:
        _struct_2BIB4f = struct.Struct("<2BIB4f")
    return _struct_2BIB4f
