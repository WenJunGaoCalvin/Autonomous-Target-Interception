// Generated by gencpp from file mavros_msgs/GimbalManagerPitchyawRequest.msg
// DO NOT EDIT!


#ifndef MAVROS_MSGS_MESSAGE_GIMBALMANAGERPITCHYAWREQUEST_H
#define MAVROS_MSGS_MESSAGE_GIMBALMANAGERPITCHYAWREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace mavros_msgs
{
template <class ContainerAllocator>
struct GimbalManagerPitchyawRequest_
{
  typedef GimbalManagerPitchyawRequest_<ContainerAllocator> Type;

  GimbalManagerPitchyawRequest_()
    : pitch(0.0)
    , yaw(0.0)
    , pitch_rate(0.0)
    , yaw_rate(0.0)
    , flags(0)
    , gimbal_device_id(0)  {
    }
  GimbalManagerPitchyawRequest_(const ContainerAllocator& _alloc)
    : pitch(0.0)
    , yaw(0.0)
    , pitch_rate(0.0)
    , yaw_rate(0.0)
    , flags(0)
    , gimbal_device_id(0)  {
  (void)_alloc;
    }



   typedef float _pitch_type;
  _pitch_type pitch;

   typedef float _yaw_type;
  _yaw_type yaw;

   typedef float _pitch_rate_type;
  _pitch_rate_type pitch_rate;

   typedef float _yaw_rate_type;
  _yaw_rate_type yaw_rate;

   typedef uint32_t _flags_type;
  _flags_type flags;

   typedef uint8_t _gimbal_device_id_type;
  _gimbal_device_id_type gimbal_device_id;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(GIMBAL_MANAGER_FLAGS_RETRACT)
  #undef GIMBAL_MANAGER_FLAGS_RETRACT
#endif
#if defined(_WIN32) && defined(GIMBAL_MANAGER_FLAGS_NEUTRAL)
  #undef GIMBAL_MANAGER_FLAGS_NEUTRAL
#endif
#if defined(_WIN32) && defined(GIMBAL_MANAGER_FLAGS_ROLL_LOCK)
  #undef GIMBAL_MANAGER_FLAGS_ROLL_LOCK
#endif
#if defined(_WIN32) && defined(GIMBAL_MANAGER_FLAGS_PITCH_LOCK)
  #undef GIMBAL_MANAGER_FLAGS_PITCH_LOCK
#endif
#if defined(_WIN32) && defined(GIMBAL_MANAGER_FLAGS_YAW_LOCK)
  #undef GIMBAL_MANAGER_FLAGS_YAW_LOCK
#endif

  enum {
    GIMBAL_MANAGER_FLAGS_RETRACT = 1u,
    GIMBAL_MANAGER_FLAGS_NEUTRAL = 2u,
    GIMBAL_MANAGER_FLAGS_ROLL_LOCK = 4u,
    GIMBAL_MANAGER_FLAGS_PITCH_LOCK = 8u,
    GIMBAL_MANAGER_FLAGS_YAW_LOCK = 16u,
  };


  typedef boost::shared_ptr< ::mavros_msgs::GimbalManagerPitchyawRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mavros_msgs::GimbalManagerPitchyawRequest_<ContainerAllocator> const> ConstPtr;

}; // struct GimbalManagerPitchyawRequest_

typedef ::mavros_msgs::GimbalManagerPitchyawRequest_<std::allocator<void> > GimbalManagerPitchyawRequest;

typedef boost::shared_ptr< ::mavros_msgs::GimbalManagerPitchyawRequest > GimbalManagerPitchyawRequestPtr;
typedef boost::shared_ptr< ::mavros_msgs::GimbalManagerPitchyawRequest const> GimbalManagerPitchyawRequestConstPtr;

// constants requiring out of line definition

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mavros_msgs::GimbalManagerPitchyawRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mavros_msgs::GimbalManagerPitchyawRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mavros_msgs::GimbalManagerPitchyawRequest_<ContainerAllocator1> & lhs, const ::mavros_msgs::GimbalManagerPitchyawRequest_<ContainerAllocator2> & rhs)
{
  return lhs.pitch == rhs.pitch &&
    lhs.yaw == rhs.yaw &&
    lhs.pitch_rate == rhs.pitch_rate &&
    lhs.yaw_rate == rhs.yaw_rate &&
    lhs.flags == rhs.flags &&
    lhs.gimbal_device_id == rhs.gimbal_device_id;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mavros_msgs::GimbalManagerPitchyawRequest_<ContainerAllocator1> & lhs, const ::mavros_msgs::GimbalManagerPitchyawRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mavros_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::mavros_msgs::GimbalManagerPitchyawRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mavros_msgs::GimbalManagerPitchyawRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mavros_msgs::GimbalManagerPitchyawRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mavros_msgs::GimbalManagerPitchyawRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mavros_msgs::GimbalManagerPitchyawRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mavros_msgs::GimbalManagerPitchyawRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mavros_msgs::GimbalManagerPitchyawRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9d8bcf4dbafb62d258835e27670a204c";
  }

  static const char* value(const ::mavros_msgs::GimbalManagerPitchyawRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9d8bcf4dbafb62d2ULL;
  static const uint64_t static_value2 = 0x58835e27670a204cULL;
};

template<class ContainerAllocator>
struct DataType< ::mavros_msgs::GimbalManagerPitchyawRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mavros_msgs/GimbalManagerPitchyawRequest";
  }

  static const char* value(const ::mavros_msgs::GimbalManagerPitchyawRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mavros_msgs::GimbalManagerPitchyawRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# MAVLink commands: DO_GIMBAL_MANAGER_PITCHYAW\n"
"# https://mavlink.io/en/messages/common.html#MAV_CMD_DO_GIMBAL_MANAGER_PITCHYAW\n"
"\n"
"\n"
"float32 pitch # Pitch angle (positive to pitch up, relative to vehicle for FOLLOW mode, relative to world horizon for LOCK mode). (-180 to 180 deg)\n"
"float32 yaw # Yaw angle (positive to yaw to the right, relative to vehicle for FOLLOW mode, absolute to North for LOCK mode). (-180 to 180 deg)\n"
"float32 pitch_rate # Pitch rate (positive to pitch up). (deg/s)\n"
"float32 yaw_rate # Yaw rate (positive to yaw to the right). (deg/s)\n"
"\n"
"uint32 flags # High level gimbal manager flags to use - See GIMBAL_MANAGER_FLAGS\n"
"#GIMBAL_MANAGER_FLAGS\n"
"uint32 GIMBAL_MANAGER_FLAGS_RETRACT = 1     # Based on GIMBAL_DEVICE_FLAGS_RETRACT\n"
"uint32 GIMBAL_MANAGER_FLAGS_NEUTRAL = 2     # Based on GIMBAL_DEVICE_FLAGS_NEUTRAL\n"
"uint32 GIMBAL_MANAGER_FLAGS_ROLL_LOCK = 4   # Based on GIMBAL_DEVICE_FLAGS_ROLL_LOCK\n"
"uint32 GIMBAL_MANAGER_FLAGS_PITCH_LOCK = 8  # Based on GIMBAL_DEVICE_FLAGS_PITCH_LOCK\n"
"uint32 GIMBAL_MANAGER_FLAGS_YAW_LOCK = 16   # Based on GIMBAL_DEVICE_FLAGS_YAW_LOCK\n"
"\n"
"uint8 gimbal_device_id  # Component ID of gimbal device to address \n"
"                        # (or 1-6 for non-MAVLink gimbal), 0 for all gimbal device\n"
"                        # components. Send command multiple times for more than\n"
"                        # one gimbal (but not all gimbals).  Default Mavlink gimbal \n"
"                        # device ids: 154, 171-175\n"
"\n"
;
  }

  static const char* value(const ::mavros_msgs::GimbalManagerPitchyawRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mavros_msgs::GimbalManagerPitchyawRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.pitch);
      stream.next(m.yaw);
      stream.next(m.pitch_rate);
      stream.next(m.yaw_rate);
      stream.next(m.flags);
      stream.next(m.gimbal_device_id);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GimbalManagerPitchyawRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mavros_msgs::GimbalManagerPitchyawRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mavros_msgs::GimbalManagerPitchyawRequest_<ContainerAllocator>& v)
  {
    s << indent << "pitch: ";
    Printer<float>::stream(s, indent + "  ", v.pitch);
    s << indent << "yaw: ";
    Printer<float>::stream(s, indent + "  ", v.yaw);
    s << indent << "pitch_rate: ";
    Printer<float>::stream(s, indent + "  ", v.pitch_rate);
    s << indent << "yaw_rate: ";
    Printer<float>::stream(s, indent + "  ", v.yaw_rate);
    s << indent << "flags: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.flags);
    s << indent << "gimbal_device_id: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.gimbal_device_id);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MAVROS_MSGS_MESSAGE_GIMBALMANAGERPITCHYAWREQUEST_H
