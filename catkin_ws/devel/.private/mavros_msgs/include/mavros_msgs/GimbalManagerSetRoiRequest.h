// Generated by gencpp from file mavros_msgs/GimbalManagerSetRoiRequest.msg
// DO NOT EDIT!


#ifndef MAVROS_MSGS_MESSAGE_GIMBALMANAGERSETROIREQUEST_H
#define MAVROS_MSGS_MESSAGE_GIMBALMANAGERSETROIREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace mavros_msgs
{
template <class ContainerAllocator>
struct GimbalManagerSetRoiRequest_
{
  typedef GimbalManagerSetRoiRequest_<ContainerAllocator> Type;

  GimbalManagerSetRoiRequest_()
    : mode(0)
    , gimbal_device_id(0)
    , latitude(0.0)
    , longitude(0.0)
    , altitude(0.0)
    , pitch_offset(0.0)
    , roll_offset(0.0)
    , yaw_offset(0.0)
    , sysid(0)  {
    }
  GimbalManagerSetRoiRequest_(const ContainerAllocator& _alloc)
    : mode(0)
    , gimbal_device_id(0)
    , latitude(0.0)
    , longitude(0.0)
    , altitude(0.0)
    , pitch_offset(0.0)
    , roll_offset(0.0)
    , yaw_offset(0.0)
    , sysid(0)  {
  (void)_alloc;
    }



   typedef uint8_t _mode_type;
  _mode_type mode;

   typedef uint8_t _gimbal_device_id_type;
  _gimbal_device_id_type gimbal_device_id;

   typedef float _latitude_type;
  _latitude_type latitude;

   typedef float _longitude_type;
  _longitude_type longitude;

   typedef float _altitude_type;
  _altitude_type altitude;

   typedef float _pitch_offset_type;
  _pitch_offset_type pitch_offset;

   typedef float _roll_offset_type;
  _roll_offset_type roll_offset;

   typedef float _yaw_offset_type;
  _yaw_offset_type yaw_offset;

   typedef uint8_t _sysid_type;
  _sysid_type sysid;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(ROI_MODE_LOCATION)
  #undef ROI_MODE_LOCATION
#endif
#if defined(_WIN32) && defined(ROI_MODE_WP_NEXT_OFFSET)
  #undef ROI_MODE_WP_NEXT_OFFSET
#endif
#if defined(_WIN32) && defined(ROI_MODE_SYSID)
  #undef ROI_MODE_SYSID
#endif
#if defined(_WIN32) && defined(ROI_MODE_NONE)
  #undef ROI_MODE_NONE
#endif

  enum {
    ROI_MODE_LOCATION = 0u,
    ROI_MODE_WP_NEXT_OFFSET = 1u,
    ROI_MODE_SYSID = 2u,
    ROI_MODE_NONE = 3u,
  };


  typedef boost::shared_ptr< ::mavros_msgs::GimbalManagerSetRoiRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mavros_msgs::GimbalManagerSetRoiRequest_<ContainerAllocator> const> ConstPtr;

}; // struct GimbalManagerSetRoiRequest_

typedef ::mavros_msgs::GimbalManagerSetRoiRequest_<std::allocator<void> > GimbalManagerSetRoiRequest;

typedef boost::shared_ptr< ::mavros_msgs::GimbalManagerSetRoiRequest > GimbalManagerSetRoiRequestPtr;
typedef boost::shared_ptr< ::mavros_msgs::GimbalManagerSetRoiRequest const> GimbalManagerSetRoiRequestConstPtr;

// constants requiring out of line definition

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mavros_msgs::GimbalManagerSetRoiRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mavros_msgs::GimbalManagerSetRoiRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mavros_msgs::GimbalManagerSetRoiRequest_<ContainerAllocator1> & lhs, const ::mavros_msgs::GimbalManagerSetRoiRequest_<ContainerAllocator2> & rhs)
{
  return lhs.mode == rhs.mode &&
    lhs.gimbal_device_id == rhs.gimbal_device_id &&
    lhs.latitude == rhs.latitude &&
    lhs.longitude == rhs.longitude &&
    lhs.altitude == rhs.altitude &&
    lhs.pitch_offset == rhs.pitch_offset &&
    lhs.roll_offset == rhs.roll_offset &&
    lhs.yaw_offset == rhs.yaw_offset &&
    lhs.sysid == rhs.sysid;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mavros_msgs::GimbalManagerSetRoiRequest_<ContainerAllocator1> & lhs, const ::mavros_msgs::GimbalManagerSetRoiRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mavros_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::mavros_msgs::GimbalManagerSetRoiRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mavros_msgs::GimbalManagerSetRoiRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mavros_msgs::GimbalManagerSetRoiRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mavros_msgs::GimbalManagerSetRoiRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mavros_msgs::GimbalManagerSetRoiRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mavros_msgs::GimbalManagerSetRoiRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mavros_msgs::GimbalManagerSetRoiRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f789d901bb3e0753c3a47a0c94b4993f";
  }

  static const char* value(const ::mavros_msgs::GimbalManagerSetRoiRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf789d901bb3e0753ULL;
  static const uint64_t static_value2 = 0xc3a47a0c94b4993fULL;
};

template<class ContainerAllocator>
struct DataType< ::mavros_msgs::GimbalManagerSetRoiRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mavros_msgs/GimbalManagerSetRoiRequest";
  }

  static const char* value(const ::mavros_msgs::GimbalManagerSetRoiRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mavros_msgs::GimbalManagerSetRoiRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# MAVLink commands: DO_SET_ROI_LOCATION, DO_SET_ROI_WPNEXT_OFFSET, DO_SET_ROI_SYSID, DO_SET_ROI_NONE\n"
"# https://mavlink.io/en/messages/common.html#MAV_CMD_DO_SET_ROI_LOCATION\n"
"# https://mavlink.io/en/messages/common.html#MAV_CMD_DO_SET_ROI_WPNEXT_OFFSET\n"
"# https://mavlink.io/en/messages/common.html#MAV_CMD_DO_SET_ROI_SYSID\n"
"# https://mavlink.io/en/messages/common.html#MAV_CMD_DO_SET_ROI_NONE\n"
"\n"
"uint8 mode              # enumerator to indicate ROI mode setting - see ROI_MODE\n"
"#ROI_MODE\n"
"uint8 ROI_MODE_LOCATION = 0         # Sets the region of interest (ROI) to a location. [DO_SET_ROI_LOCATION]\n"
"uint8 ROI_MODE_WP_NEXT_OFFSET = 1   # Sets the region of interest (ROI) to be toward next waypoint, with optional pitch/roll/yaw offset. [DO_SET_ROI_WPNEXT_OFFSET]\n"
"uint8 ROI_MODE_SYSID = 2            # Mount tracks system with specified system ID [DO_SET_ROI_SYSID]\n"
"uint8 ROI_MODE_NONE = 3             # Cancels any previous ROI setting and returns vehicle to defaults [DO_SET_ROI_NONE]\n"
"\n"
"uint8 gimbal_device_id  # Component ID of gimbal device to address \n"
"                        # (or 1-6 for non-MAVLink gimbal), 0 for all gimbal device\n"
"                        # components. Send command multiple times for more than\n"
"                        # one gimbal (but not all gimbals).  Default Mavlink gimbal \n"
"                        # device ids: 154, 171-175\n"
"\n"
"#For ROI_MODE_LOCATION\n"
"float32 latitude\n"
"float32 longitude\n"
"float32 altitude        # Meters\n"
"\n"
"#For ROI_MODE_WP_NEXT_OFFSET\n"
"float32 pitch_offset    # Pitch offset from next waypoint, positive pitching up\n"
"float32 roll_offset     # Roll offset from next waypoint, positive rolling to the right\n"
"float32 yaw_offset      # Yaw offset from next waypoint, positive yawing to the right\n"
"\n"
"#For ROI_MODE_SYSID\n"
"uint8 sysid             # System ID to track (min: 1, max: 255)\n"
"\n"
"#ROI_MODE_NONE doesn't take extra parameters\n"
"\n"
;
  }

  static const char* value(const ::mavros_msgs::GimbalManagerSetRoiRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mavros_msgs::GimbalManagerSetRoiRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.mode);
      stream.next(m.gimbal_device_id);
      stream.next(m.latitude);
      stream.next(m.longitude);
      stream.next(m.altitude);
      stream.next(m.pitch_offset);
      stream.next(m.roll_offset);
      stream.next(m.yaw_offset);
      stream.next(m.sysid);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GimbalManagerSetRoiRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mavros_msgs::GimbalManagerSetRoiRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mavros_msgs::GimbalManagerSetRoiRequest_<ContainerAllocator>& v)
  {
    s << indent << "mode: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.mode);
    s << indent << "gimbal_device_id: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.gimbal_device_id);
    s << indent << "latitude: ";
    Printer<float>::stream(s, indent + "  ", v.latitude);
    s << indent << "longitude: ";
    Printer<float>::stream(s, indent + "  ", v.longitude);
    s << indent << "altitude: ";
    Printer<float>::stream(s, indent + "  ", v.altitude);
    s << indent << "pitch_offset: ";
    Printer<float>::stream(s, indent + "  ", v.pitch_offset);
    s << indent << "roll_offset: ";
    Printer<float>::stream(s, indent + "  ", v.roll_offset);
    s << indent << "yaw_offset: ";
    Printer<float>::stream(s, indent + "  ", v.yaw_offset);
    s << indent << "sysid: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.sysid);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MAVROS_MSGS_MESSAGE_GIMBALMANAGERSETROIREQUEST_H
