// Generated by gencpp from file mavros_msgs/GimbalManagerStatus.msg
// DO NOT EDIT!


#ifndef MAVROS_MSGS_MESSAGE_GIMBALMANAGERSTATUS_H
#define MAVROS_MSGS_MESSAGE_GIMBALMANAGERSTATUS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace mavros_msgs
{
template <class ContainerAllocator>
struct GimbalManagerStatus_
{
  typedef GimbalManagerStatus_<ContainerAllocator> Type;

  GimbalManagerStatus_()
    : header()
    , flags(0)
    , gimbal_device_id(0)
    , sysid_primary(0)
    , compid_primary(0)
    , sysid_secondary(0)
    , compid_secondary(0)  {
    }
  GimbalManagerStatus_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , flags(0)
    , gimbal_device_id(0)
    , sysid_primary(0)
    , compid_primary(0)
    , sysid_secondary(0)
    , compid_secondary(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint32_t _flags_type;
  _flags_type flags;

   typedef uint8_t _gimbal_device_id_type;
  _gimbal_device_id_type gimbal_device_id;

   typedef uint8_t _sysid_primary_type;
  _sysid_primary_type sysid_primary;

   typedef uint8_t _compid_primary_type;
  _compid_primary_type compid_primary;

   typedef uint8_t _sysid_secondary_type;
  _sysid_secondary_type sysid_secondary;

   typedef uint8_t _compid_secondary_type;
  _compid_secondary_type compid_secondary;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(GIMBAL_MANAGER_FLAGS_RETRACT)
  #undef GIMBAL_MANAGER_FLAGS_RETRACT
#endif
#if defined(_WIN32) && defined(GIMBAL_MANAGER_FLAGS_NEUTRAL)
  #undef GIMBAL_MANAGER_FLAGS_NEUTRAL
#endif
#if defined(_WIN32) && defined(GIMBAL_MANAGER_FLAGS_ROLL_LOCK)
  #undef GIMBAL_MANAGER_FLAGS_ROLL_LOCK
#endif
#if defined(_WIN32) && defined(GIMBAL_MANAGER_FLAGS_PITCH_LOCK)
  #undef GIMBAL_MANAGER_FLAGS_PITCH_LOCK
#endif
#if defined(_WIN32) && defined(GIMBAL_MANAGER_FLAGS_YAW_LOCK)
  #undef GIMBAL_MANAGER_FLAGS_YAW_LOCK
#endif

  enum {
    GIMBAL_MANAGER_FLAGS_RETRACT = 1u,
    GIMBAL_MANAGER_FLAGS_NEUTRAL = 2u,
    GIMBAL_MANAGER_FLAGS_ROLL_LOCK = 4u,
    GIMBAL_MANAGER_FLAGS_PITCH_LOCK = 8u,
    GIMBAL_MANAGER_FLAGS_YAW_LOCK = 16u,
  };


  typedef boost::shared_ptr< ::mavros_msgs::GimbalManagerStatus_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mavros_msgs::GimbalManagerStatus_<ContainerAllocator> const> ConstPtr;

}; // struct GimbalManagerStatus_

typedef ::mavros_msgs::GimbalManagerStatus_<std::allocator<void> > GimbalManagerStatus;

typedef boost::shared_ptr< ::mavros_msgs::GimbalManagerStatus > GimbalManagerStatusPtr;
typedef boost::shared_ptr< ::mavros_msgs::GimbalManagerStatus const> GimbalManagerStatusConstPtr;

// constants requiring out of line definition

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mavros_msgs::GimbalManagerStatus_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mavros_msgs::GimbalManagerStatus_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mavros_msgs::GimbalManagerStatus_<ContainerAllocator1> & lhs, const ::mavros_msgs::GimbalManagerStatus_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.flags == rhs.flags &&
    lhs.gimbal_device_id == rhs.gimbal_device_id &&
    lhs.sysid_primary == rhs.sysid_primary &&
    lhs.compid_primary == rhs.compid_primary &&
    lhs.sysid_secondary == rhs.sysid_secondary &&
    lhs.compid_secondary == rhs.compid_secondary;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mavros_msgs::GimbalManagerStatus_<ContainerAllocator1> & lhs, const ::mavros_msgs::GimbalManagerStatus_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mavros_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::mavros_msgs::GimbalManagerStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mavros_msgs::GimbalManagerStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mavros_msgs::GimbalManagerStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mavros_msgs::GimbalManagerStatus_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mavros_msgs::GimbalManagerStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mavros_msgs::GimbalManagerStatus_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mavros_msgs::GimbalManagerStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fc335d636c5417cf82ed6184846e75a1";
  }

  static const char* value(const ::mavros_msgs::GimbalManagerStatus_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xfc335d636c5417cfULL;
  static const uint64_t static_value2 = 0x82ed6184846e75a1ULL;
};

template<class ContainerAllocator>
struct DataType< ::mavros_msgs::GimbalManagerStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mavros_msgs/GimbalManagerStatus";
  }

  static const char* value(const ::mavros_msgs::GimbalManagerStatus_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mavros_msgs::GimbalManagerStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# MAVLink message: GIMBAL_MANAGER_STATUS\n"
"# https://mavlink.io/en/messages/common.html#GIMBAL_MANAGER_STATUS\n"
"\n"
"std_msgs/Header header\n"
"\n"
"uint32 flags                # High level gimbal manager flags to use - See GIMBAL_MANAGER_FLAGS\n"
"#GIMBAL_MANAGER_FLAGS\n"
"uint32 GIMBAL_MANAGER_FLAGS_RETRACT = 1     # Based on GIMBAL_DEVICE_FLAGS_RETRACT\n"
"uint32 GIMBAL_MANAGER_FLAGS_NEUTRAL = 2     # Based on GIMBAL_DEVICE_FLAGS_NEUTRAL\n"
"uint32 GIMBAL_MANAGER_FLAGS_ROLL_LOCK = 4   # Based on GIMBAL_DEVICE_FLAGS_ROLL_LOCK\n"
"uint32 GIMBAL_MANAGER_FLAGS_PITCH_LOCK = 8  # Based on GIMBAL_DEVICE_FLAGS_PITCH_LOCK\n"
"uint32 GIMBAL_MANAGER_FLAGS_YAW_LOCK = 16   # Based on GIMBAL_DEVICE_FLAGS_YAW_LOCK\n"
"\n"
"uint8 gimbal_device_id # Gimbal device ID that this gimbal manager is responsible for.\n"
"\n"
"uint8 sysid_primary     # System ID of MAVLink component with primary control, 0 for none.\n"
"uint8 compid_primary    # Component ID of MAVLink component with primary control, 0 for none.\n"
"uint8 sysid_secondary   # System ID of MAVLink component with secondary control, 0 for none.\n"
"uint8 compid_secondary  # Component ID of MAVLink component with secondary control, 0 for none.\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::mavros_msgs::GimbalManagerStatus_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mavros_msgs::GimbalManagerStatus_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.flags);
      stream.next(m.gimbal_device_id);
      stream.next(m.sysid_primary);
      stream.next(m.compid_primary);
      stream.next(m.sysid_secondary);
      stream.next(m.compid_secondary);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GimbalManagerStatus_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mavros_msgs::GimbalManagerStatus_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mavros_msgs::GimbalManagerStatus_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "flags: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.flags);
    s << indent << "gimbal_device_id: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.gimbal_device_id);
    s << indent << "sysid_primary: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.sysid_primary);
    s << indent << "compid_primary: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.compid_primary);
    s << indent << "sysid_secondary: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.sysid_secondary);
    s << indent << "compid_secondary: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.compid_secondary);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MAVROS_MSGS_MESSAGE_GIMBALMANAGERSTATUS_H
