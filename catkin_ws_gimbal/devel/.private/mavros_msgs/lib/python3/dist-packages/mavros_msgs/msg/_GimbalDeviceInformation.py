# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from mavros_msgs/GimbalDeviceInformation.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class GimbalDeviceInformation(genpy.Message):
  _md5sum = "cf9937985a9347aa15974b9c7eb2fa20"
  _type = "mavros_msgs/GimbalDeviceInformation"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """# MAVLink message: GIMBAL_DEVICE_INFORMATION
# https://mavlink.io/en/messages/common.html#GIMBAL_DEVICE_INFORMATION

std_msgs/Header header

string vendor_name # Name of the gimbal vendor.
string model_name # Name of the gimbal model.
string custom_name # Custom name of the gimbal given to it by the user.
uint32 firmware_version # Version of the gimbal firmware, encoded as: (Dev & 0xff) << 24 | (Patch & 0xff) << 16 | (Minor & 0xff) << 8 | (Major & 0xff).
uint32 hardware_version # Version of the gimbal hardware, encoded as: (Dev & 0xff) << 24 | (Patch & 0xff) << 16 | (Minor & 0xff) << 8 | (Major & 0xff).
uint64 uid # UID of gimbal hardware (0 if unknown).

uint32 cap_flags # Bitmap of gimbal capability flags - see GIMBAL_DEVICE_CAP_FLAGS
#GIMBAL_DEVICE_CAP_FLAGS
uint32 GIMBAL_DEVICE_CAP_FLAGS_HAS_RETRACT = 1 # Gimbal device supports a retracted position
uint32 GIMBAL_DEVICE_CAP_FLAGS_HAS_NEUTRAL = 2 # Gimbal device supports a horizontal, forward looking position, stabilized
uint32 GIMBAL_DEVICE_CAP_FLAGS_HAS_ROLL_AXIS = 4 # Gimbal device supports rotating around roll axis.
uint32 GIMBAL_DEVICE_CAP_FLAGS_HAS_ROLL_FOLLOW = 8 # Gimbal device supports to follow a roll angle relative to the vehicle
uint32 GIMBAL_DEVICE_CAP_FLAGS_HAS_ROLL_LOCK = 16 # Gimbal device supports locking to an roll angle (generally that's the default with roll stabilized)
uint32 GIMBAL_DEVICE_CAP_FLAGS_HAS_PITCH_AXIS = 32 # Gimbal device supports rotating around pitch axis.
uint32 GIMBAL_DEVICE_CAP_FLAGS_HAS_PITCH_FOLLOW = 64 # Gimbal device supports to follow a pitch angle relative to the vehicle
uint32 GIMBAL_DEVICE_CAP_FLAGS_HAS_PITCH_LOCK = 128 # Gimbal device supports locking to an pitch angle (generally that's the default with pitch stabilized)
uint32 GIMBAL_DEVICE_CAP_FLAGS_HAS_YAW_AXIS = 256 # Gimbal device supports rotating around yaw axis.
uint32 GIMBAL_DEVICE_CAP_FLAGS_HAS_YAW_FOLLOW = 512 # Gimbal device supports to follow a yaw angle relative to the vehicle (generally that's the default)
uint32 GIMBAL_DEVICE_CAP_FLAGS_HAS_YAW_LOCK = 1024 # Gimbal device supports locking to an absolute heading (often this is an option available)
uint32 GIMBAL_DEVICE_CAP_FLAGS_SUPPORTS_INFINITE_YAW = 2048 # Gimbal device supports yawing/panning infinetely (e.g. using slip disk).

uint16 custom_cap_flags # Bitmap for use for gimbal-specific capability flags.
float32 roll_min # Minimum hardware roll angle (positive: rolling to the right, negative: rolling to the left)
float32 roll_max # Maximum hardware roll angle (positive: rolling to the right, negative: rolling to the left)
float32 pitch_min # Minimum pitch angle (positive: up, negative: down)
float32 pitch_max # Maximum pitch angle (positive: up, negative: down)
float32 yaw_min # Minimum yaw angle (positive: to the right, negative: to the left)
float32 yaw_max # Maximum yaw angle (positive: to the right, negative: to the left)
================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id
"""
  # Pseudo-constants
  GIMBAL_DEVICE_CAP_FLAGS_HAS_RETRACT = 1
  GIMBAL_DEVICE_CAP_FLAGS_HAS_NEUTRAL = 2
  GIMBAL_DEVICE_CAP_FLAGS_HAS_ROLL_AXIS = 4
  GIMBAL_DEVICE_CAP_FLAGS_HAS_ROLL_FOLLOW = 8
  GIMBAL_DEVICE_CAP_FLAGS_HAS_ROLL_LOCK = 16
  GIMBAL_DEVICE_CAP_FLAGS_HAS_PITCH_AXIS = 32
  GIMBAL_DEVICE_CAP_FLAGS_HAS_PITCH_FOLLOW = 64
  GIMBAL_DEVICE_CAP_FLAGS_HAS_PITCH_LOCK = 128
  GIMBAL_DEVICE_CAP_FLAGS_HAS_YAW_AXIS = 256
  GIMBAL_DEVICE_CAP_FLAGS_HAS_YAW_FOLLOW = 512
  GIMBAL_DEVICE_CAP_FLAGS_HAS_YAW_LOCK = 1024
  GIMBAL_DEVICE_CAP_FLAGS_SUPPORTS_INFINITE_YAW = 2048

  __slots__ = ['header','vendor_name','model_name','custom_name','firmware_version','hardware_version','uid','cap_flags','custom_cap_flags','roll_min','roll_max','pitch_min','pitch_max','yaw_min','yaw_max']
  _slot_types = ['std_msgs/Header','string','string','string','uint32','uint32','uint64','uint32','uint16','float32','float32','float32','float32','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,vendor_name,model_name,custom_name,firmware_version,hardware_version,uid,cap_flags,custom_cap_flags,roll_min,roll_max,pitch_min,pitch_max,yaw_min,yaw_max

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(GimbalDeviceInformation, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.vendor_name is None:
        self.vendor_name = ''
      if self.model_name is None:
        self.model_name = ''
      if self.custom_name is None:
        self.custom_name = ''
      if self.firmware_version is None:
        self.firmware_version = 0
      if self.hardware_version is None:
        self.hardware_version = 0
      if self.uid is None:
        self.uid = 0
      if self.cap_flags is None:
        self.cap_flags = 0
      if self.custom_cap_flags is None:
        self.custom_cap_flags = 0
      if self.roll_min is None:
        self.roll_min = 0.
      if self.roll_max is None:
        self.roll_max = 0.
      if self.pitch_min is None:
        self.pitch_min = 0.
      if self.pitch_max is None:
        self.pitch_max = 0.
      if self.yaw_min is None:
        self.yaw_min = 0.
      if self.yaw_max is None:
        self.yaw_max = 0.
    else:
      self.header = std_msgs.msg.Header()
      self.vendor_name = ''
      self.model_name = ''
      self.custom_name = ''
      self.firmware_version = 0
      self.hardware_version = 0
      self.uid = 0
      self.cap_flags = 0
      self.custom_cap_flags = 0
      self.roll_min = 0.
      self.roll_max = 0.
      self.pitch_min = 0.
      self.pitch_max = 0.
      self.yaw_min = 0.
      self.yaw_max = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.vendor_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.model_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.custom_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2IQIH6f().pack(_x.firmware_version, _x.hardware_version, _x.uid, _x.cap_flags, _x.custom_cap_flags, _x.roll_min, _x.roll_max, _x.pitch_min, _x.pitch_max, _x.yaw_min, _x.yaw_max))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.vendor_name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.vendor_name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.model_name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.model_name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.custom_name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.custom_name = str[start:end]
      _x = self
      start = end
      end += 46
      (_x.firmware_version, _x.hardware_version, _x.uid, _x.cap_flags, _x.custom_cap_flags, _x.roll_min, _x.roll_max, _x.pitch_min, _x.pitch_max, _x.yaw_min, _x.yaw_max,) = _get_struct_2IQIH6f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.vendor_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.model_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.custom_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2IQIH6f().pack(_x.firmware_version, _x.hardware_version, _x.uid, _x.cap_flags, _x.custom_cap_flags, _x.roll_min, _x.roll_max, _x.pitch_min, _x.pitch_max, _x.yaw_min, _x.yaw_max))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.vendor_name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.vendor_name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.model_name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.model_name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.custom_name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.custom_name = str[start:end]
      _x = self
      start = end
      end += 46
      (_x.firmware_version, _x.hardware_version, _x.uid, _x.cap_flags, _x.custom_cap_flags, _x.roll_min, _x.roll_max, _x.pitch_min, _x.pitch_max, _x.yaw_min, _x.yaw_max,) = _get_struct_2IQIH6f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2IQIH6f = None
def _get_struct_2IQIH6f():
    global _struct_2IQIH6f
    if _struct_2IQIH6f is None:
        _struct_2IQIH6f = struct.Struct("<2IQIH6f")
    return _struct_2IQIH6f
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
