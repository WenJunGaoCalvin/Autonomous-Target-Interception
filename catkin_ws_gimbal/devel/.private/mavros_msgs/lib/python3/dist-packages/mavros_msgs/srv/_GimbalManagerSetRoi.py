# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from mavros_msgs/GimbalManagerSetRoiRequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class GimbalManagerSetRoiRequest(genpy.Message):
  _md5sum = "f789d901bb3e0753c3a47a0c94b4993f"
  _type = "mavros_msgs/GimbalManagerSetRoiRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# MAVLink commands: DO_SET_ROI_LOCATION, DO_SET_ROI_WPNEXT_OFFSET, DO_SET_ROI_SYSID, DO_SET_ROI_NONE
# https://mavlink.io/en/messages/common.html#MAV_CMD_DO_SET_ROI_LOCATION
# https://mavlink.io/en/messages/common.html#MAV_CMD_DO_SET_ROI_WPNEXT_OFFSET
# https://mavlink.io/en/messages/common.html#MAV_CMD_DO_SET_ROI_SYSID
# https://mavlink.io/en/messages/common.html#MAV_CMD_DO_SET_ROI_NONE

uint8 mode              # enumerator to indicate ROI mode setting - see ROI_MODE
#ROI_MODE
uint8 ROI_MODE_LOCATION = 0         # Sets the region of interest (ROI) to a location. [DO_SET_ROI_LOCATION]
uint8 ROI_MODE_WP_NEXT_OFFSET = 1   # Sets the region of interest (ROI) to be toward next waypoint, with optional pitch/roll/yaw offset. [DO_SET_ROI_WPNEXT_OFFSET]
uint8 ROI_MODE_SYSID = 2            # Mount tracks system with specified system ID [DO_SET_ROI_SYSID]
uint8 ROI_MODE_NONE = 3             # Cancels any previous ROI setting and returns vehicle to defaults [DO_SET_ROI_NONE]

uint8 gimbal_device_id  # Component ID of gimbal device to address 
                        # (or 1-6 for non-MAVLink gimbal), 0 for all gimbal device
                        # components. Send command multiple times for more than
                        # one gimbal (but not all gimbals).  Default Mavlink gimbal 
                        # device ids: 154, 171-175

#For ROI_MODE_LOCATION
float32 latitude
float32 longitude
float32 altitude        # Meters

#For ROI_MODE_WP_NEXT_OFFSET
float32 pitch_offset    # Pitch offset from next waypoint, positive pitching up
float32 roll_offset     # Roll offset from next waypoint, positive rolling to the right
float32 yaw_offset      # Yaw offset from next waypoint, positive yawing to the right

#For ROI_MODE_SYSID
uint8 sysid             # System ID to track (min: 1, max: 255)

#ROI_MODE_NONE doesn't take extra parameters

"""
  # Pseudo-constants
  ROI_MODE_LOCATION = 0
  ROI_MODE_WP_NEXT_OFFSET = 1
  ROI_MODE_SYSID = 2
  ROI_MODE_NONE = 3

  __slots__ = ['mode','gimbal_device_id','latitude','longitude','altitude','pitch_offset','roll_offset','yaw_offset','sysid']
  _slot_types = ['uint8','uint8','float32','float32','float32','float32','float32','float32','uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       mode,gimbal_device_id,latitude,longitude,altitude,pitch_offset,roll_offset,yaw_offset,sysid

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(GimbalManagerSetRoiRequest, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.mode is None:
        self.mode = 0
      if self.gimbal_device_id is None:
        self.gimbal_device_id = 0
      if self.latitude is None:
        self.latitude = 0.
      if self.longitude is None:
        self.longitude = 0.
      if self.altitude is None:
        self.altitude = 0.
      if self.pitch_offset is None:
        self.pitch_offset = 0.
      if self.roll_offset is None:
        self.roll_offset = 0.
      if self.yaw_offset is None:
        self.yaw_offset = 0.
      if self.sysid is None:
        self.sysid = 0
    else:
      self.mode = 0
      self.gimbal_device_id = 0
      self.latitude = 0.
      self.longitude = 0.
      self.altitude = 0.
      self.pitch_offset = 0.
      self.roll_offset = 0.
      self.yaw_offset = 0.
      self.sysid = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2B6fB().pack(_x.mode, _x.gimbal_device_id, _x.latitude, _x.longitude, _x.altitude, _x.pitch_offset, _x.roll_offset, _x.yaw_offset, _x.sysid))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 27
      (_x.mode, _x.gimbal_device_id, _x.latitude, _x.longitude, _x.altitude, _x.pitch_offset, _x.roll_offset, _x.yaw_offset, _x.sysid,) = _get_struct_2B6fB().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2B6fB().pack(_x.mode, _x.gimbal_device_id, _x.latitude, _x.longitude, _x.altitude, _x.pitch_offset, _x.roll_offset, _x.yaw_offset, _x.sysid))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 27
      (_x.mode, _x.gimbal_device_id, _x.latitude, _x.longitude, _x.altitude, _x.pitch_offset, _x.roll_offset, _x.yaw_offset, _x.sysid,) = _get_struct_2B6fB().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2B6fB = None
def _get_struct_2B6fB():
    global _struct_2B6fB
    if _struct_2B6fB is None:
        _struct_2B6fB = struct.Struct("<2B6fB")
    return _struct_2B6fB
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from mavros_msgs/GimbalManagerSetRoiResponse.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class GimbalManagerSetRoiResponse(genpy.Message):
  _md5sum = "1cd894375e4e3d2861d2222772894fdb"
  _type = "mavros_msgs/GimbalManagerSetRoiResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """bool success
# raw result returned by COMMAND_ACK
uint8 result
"""
  __slots__ = ['success','result']
  _slot_types = ['bool','uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       success,result

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(GimbalManagerSetRoiResponse, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.success is None:
        self.success = False
      if self.result is None:
        self.result = 0
    else:
      self.success = False
      self.result = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2B().pack(_x.success, _x.result))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 2
      (_x.success, _x.result,) = _get_struct_2B().unpack(str[start:end])
      self.success = bool(self.success)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2B().pack(_x.success, _x.result))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 2
      (_x.success, _x.result,) = _get_struct_2B().unpack(str[start:end])
      self.success = bool(self.success)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2B = None
def _get_struct_2B():
    global _struct_2B
    if _struct_2B is None:
        _struct_2B = struct.Struct("<2B")
    return _struct_2B
class GimbalManagerSetRoi(object):
  _type          = 'mavros_msgs/GimbalManagerSetRoi'
  _md5sum = '0796c6a6cf0e18b0d829681b29f0828a'
  _request_class  = GimbalManagerSetRoiRequest
  _response_class = GimbalManagerSetRoiResponse
