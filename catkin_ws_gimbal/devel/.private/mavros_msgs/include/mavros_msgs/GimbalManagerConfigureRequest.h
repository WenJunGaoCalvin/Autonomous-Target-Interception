// Generated by gencpp from file mavros_msgs/GimbalManagerConfigureRequest.msg
// DO NOT EDIT!


#ifndef MAVROS_MSGS_MESSAGE_GIMBALMANAGERCONFIGUREREQUEST_H
#define MAVROS_MSGS_MESSAGE_GIMBALMANAGERCONFIGUREREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace mavros_msgs
{
template <class ContainerAllocator>
struct GimbalManagerConfigureRequest_
{
  typedef GimbalManagerConfigureRequest_<ContainerAllocator> Type;

  GimbalManagerConfigureRequest_()
    : sysid_primary(0)
    , compid_primary(0)
    , sysid_secondary(0)
    , compid_secondary(0)
    , gimbal_device_id(0)  {
    }
  GimbalManagerConfigureRequest_(const ContainerAllocator& _alloc)
    : sysid_primary(0)
    , compid_primary(0)
    , sysid_secondary(0)
    , compid_secondary(0)
    , gimbal_device_id(0)  {
  (void)_alloc;
    }



   typedef int16_t _sysid_primary_type;
  _sysid_primary_type sysid_primary;

   typedef int16_t _compid_primary_type;
  _compid_primary_type compid_primary;

   typedef int16_t _sysid_secondary_type;
  _sysid_secondary_type sysid_secondary;

   typedef int16_t _compid_secondary_type;
  _compid_secondary_type compid_secondary;

   typedef uint8_t _gimbal_device_id_type;
  _gimbal_device_id_type gimbal_device_id;





  typedef boost::shared_ptr< ::mavros_msgs::GimbalManagerConfigureRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mavros_msgs::GimbalManagerConfigureRequest_<ContainerAllocator> const> ConstPtr;

}; // struct GimbalManagerConfigureRequest_

typedef ::mavros_msgs::GimbalManagerConfigureRequest_<std::allocator<void> > GimbalManagerConfigureRequest;

typedef boost::shared_ptr< ::mavros_msgs::GimbalManagerConfigureRequest > GimbalManagerConfigureRequestPtr;
typedef boost::shared_ptr< ::mavros_msgs::GimbalManagerConfigureRequest const> GimbalManagerConfigureRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mavros_msgs::GimbalManagerConfigureRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mavros_msgs::GimbalManagerConfigureRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mavros_msgs::GimbalManagerConfigureRequest_<ContainerAllocator1> & lhs, const ::mavros_msgs::GimbalManagerConfigureRequest_<ContainerAllocator2> & rhs)
{
  return lhs.sysid_primary == rhs.sysid_primary &&
    lhs.compid_primary == rhs.compid_primary &&
    lhs.sysid_secondary == rhs.sysid_secondary &&
    lhs.compid_secondary == rhs.compid_secondary &&
    lhs.gimbal_device_id == rhs.gimbal_device_id;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mavros_msgs::GimbalManagerConfigureRequest_<ContainerAllocator1> & lhs, const ::mavros_msgs::GimbalManagerConfigureRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mavros_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::mavros_msgs::GimbalManagerConfigureRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mavros_msgs::GimbalManagerConfigureRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mavros_msgs::GimbalManagerConfigureRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mavros_msgs::GimbalManagerConfigureRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mavros_msgs::GimbalManagerConfigureRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mavros_msgs::GimbalManagerConfigureRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mavros_msgs::GimbalManagerConfigureRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "68c32f3cd41fdfa83d7b863c5f5f2cb5";
  }

  static const char* value(const ::mavros_msgs::GimbalManagerConfigureRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x68c32f3cd41fdfa8ULL;
  static const uint64_t static_value2 = 0x3d7b863c5f5f2cb5ULL;
};

template<class ContainerAllocator>
struct DataType< ::mavros_msgs::GimbalManagerConfigureRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mavros_msgs/GimbalManagerConfigureRequest";
  }

  static const char* value(const ::mavros_msgs::GimbalManagerConfigureRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mavros_msgs::GimbalManagerConfigureRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# MAVLink command: DO_GIMBAL_MANAGER_CONFIGURE\n"
"# https://mavlink.io/en/messages/common.html#MAV_CMD_DO_GIMBAL_MANAGER_CONFIGURE\n"
"# Note: default MAV_COMP_ID_ONBOARD_COMPUTER = 191, see MAV_COMPONENT documentation\n"
"# https://mavlink.io/en/messages/common.html#MAV_COMPONENT\n"
"\n"
"int16 sysid_primary      # Sysid for primary control (0: no one in control, \n"
"                        # -1: leave unchanged, -2: set itself in control \n"
"                        # (for missions where the own sysid is still unknown), \n"
"                        # -3: remove control if currently in control).\n"
"int16 compid_primary     # Compid for primary control (0: no one in control, \n"
"                        # -1: leave unchanged, -2: set itself in control \n"
"                        # (for missions where the own sysid is still unknown), \n"
"                        # -3: remove control if currently in control).\n"
"int16 sysid_secondary    # Sysid for secondary control (0: no one in control, \n"
"                        # -1: leave unchanged, -2: set itself in control \n"
"                        # (for missions where the own sysid is still unknown), \n"
"                        # -3: remove control if currently in control).\n"
"int16 compid_secondary   # Compid for secondary control (0: no one in control, \n"
"                        # -1: leave unchanged, -2: set itself in control \n"
"                        # (for missions where the own sysid is still unknown), \n"
"                        # -3: remove control if currently in control).\n"
"\n"
"uint8 gimbal_device_id  # Component ID of gimbal device to address \n"
"                        # (or 1-6 for non-MAVLink gimbal), 0 for all gimbal device\n"
"                        # components. Send command multiple times for more than\n"
"                        # one gimbal (but not all gimbals).\n"
"                        # Note: Default Mavlink gimbal device ids: 154, 171-175\n"
"\n"
;
  }

  static const char* value(const ::mavros_msgs::GimbalManagerConfigureRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mavros_msgs::GimbalManagerConfigureRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.sysid_primary);
      stream.next(m.compid_primary);
      stream.next(m.sysid_secondary);
      stream.next(m.compid_secondary);
      stream.next(m.gimbal_device_id);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GimbalManagerConfigureRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mavros_msgs::GimbalManagerConfigureRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mavros_msgs::GimbalManagerConfigureRequest_<ContainerAllocator>& v)
  {
    s << indent << "sysid_primary: ";
    Printer<int16_t>::stream(s, indent + "  ", v.sysid_primary);
    s << indent << "compid_primary: ";
    Printer<int16_t>::stream(s, indent + "  ", v.compid_primary);
    s << indent << "sysid_secondary: ";
    Printer<int16_t>::stream(s, indent + "  ", v.sysid_secondary);
    s << indent << "compid_secondary: ";
    Printer<int16_t>::stream(s, indent + "  ", v.compid_secondary);
    s << indent << "gimbal_device_id: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.gimbal_device_id);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MAVROS_MSGS_MESSAGE_GIMBALMANAGERCONFIGUREREQUEST_H
