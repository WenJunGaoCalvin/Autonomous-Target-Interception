// Generated by gencpp from file mavros_msgs/GimbalDeviceAttitudeStatus.msg
// DO NOT EDIT!


#ifndef MAVROS_MSGS_MESSAGE_GIMBALDEVICEATTITUDESTATUS_H
#define MAVROS_MSGS_MESSAGE_GIMBALDEVICEATTITUDESTATUS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <geometry_msgs/Quaternion.h>

namespace mavros_msgs
{
template <class ContainerAllocator>
struct GimbalDeviceAttitudeStatus_
{
  typedef GimbalDeviceAttitudeStatus_<ContainerAllocator> Type;

  GimbalDeviceAttitudeStatus_()
    : header()
    , target_system(0)
    , target_component(0)
    , flags(0)
    , q()
    , angular_velocity_x(0.0)
    , angular_velocity_y(0.0)
    , angular_velocity_z(0.0)
    , failure_flags(0)  {
    }
  GimbalDeviceAttitudeStatus_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , target_system(0)
    , target_component(0)
    , flags(0)
    , q(_alloc)
    , angular_velocity_x(0.0)
    , angular_velocity_y(0.0)
    , angular_velocity_z(0.0)
    , failure_flags(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint8_t _target_system_type;
  _target_system_type target_system;

   typedef uint8_t _target_component_type;
  _target_component_type target_component;

   typedef uint16_t _flags_type;
  _flags_type flags;

   typedef  ::geometry_msgs::Quaternion_<ContainerAllocator>  _q_type;
  _q_type q;

   typedef float _angular_velocity_x_type;
  _angular_velocity_x_type angular_velocity_x;

   typedef float _angular_velocity_y_type;
  _angular_velocity_y_type angular_velocity_y;

   typedef float _angular_velocity_z_type;
  _angular_velocity_z_type angular_velocity_z;

   typedef uint32_t _failure_flags_type;
  _failure_flags_type failure_flags;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(GIMBAL_DEVICE_FLAGS_RETRACT)
  #undef GIMBAL_DEVICE_FLAGS_RETRACT
#endif
#if defined(_WIN32) && defined(GIMBAL_DEVICE_FLAGS_NEUTRAL)
  #undef GIMBAL_DEVICE_FLAGS_NEUTRAL
#endif
#if defined(_WIN32) && defined(GIMBAL_DEVICE_FLAGS_ROLL_LOCK)
  #undef GIMBAL_DEVICE_FLAGS_ROLL_LOCK
#endif
#if defined(_WIN32) && defined(GIMBAL_DEVICE_FLAGS_PITCH_LOCK)
  #undef GIMBAL_DEVICE_FLAGS_PITCH_LOCK
#endif
#if defined(_WIN32) && defined(GIMBAL_DEVICE_FLAGS_YAW_LOCK)
  #undef GIMBAL_DEVICE_FLAGS_YAW_LOCK
#endif
#if defined(_WIN32) && defined(GIMBAL_DEVICE_ERROR_FLAGS_AT_ROLL_LIMIT)
  #undef GIMBAL_DEVICE_ERROR_FLAGS_AT_ROLL_LIMIT
#endif
#if defined(_WIN32) && defined(GIMBAL_DEVICE_ERROR_FLAGS_AT_PITCH_LIMIT)
  #undef GIMBAL_DEVICE_ERROR_FLAGS_AT_PITCH_LIMIT
#endif
#if defined(_WIN32) && defined(GIMBAL_DEVICE_ERROR_FLAGS_AT_YAW_LIMIT)
  #undef GIMBAL_DEVICE_ERROR_FLAGS_AT_YAW_LIMIT
#endif
#if defined(_WIN32) && defined(GIMBAL_DEVICE_ERROR_FLAGS_ENCODER_ERROR)
  #undef GIMBAL_DEVICE_ERROR_FLAGS_ENCODER_ERROR
#endif
#if defined(_WIN32) && defined(GIMBAL_DEVICE_ERROR_FLAGS_POWER_ERROR)
  #undef GIMBAL_DEVICE_ERROR_FLAGS_POWER_ERROR
#endif
#if defined(_WIN32) && defined(GIMBAL_DEVICE_ERROR_FLAGS_MOTOR_ERROR)
  #undef GIMBAL_DEVICE_ERROR_FLAGS_MOTOR_ERROR
#endif
#if defined(_WIN32) && defined(GIMBAL_DEVICE_ERROR_FLAGS_SOFTWARE_ERROR)
  #undef GIMBAL_DEVICE_ERROR_FLAGS_SOFTWARE_ERROR
#endif
#if defined(_WIN32) && defined(GIMBAL_DEVICE_ERROR_FLAGS_COMMS_ERROR)
  #undef GIMBAL_DEVICE_ERROR_FLAGS_COMMS_ERROR
#endif
#if defined(_WIN32) && defined(GIMBAL_DEVICE_ERROR_FLAGS_CALIBRATION_RUNNING)
  #undef GIMBAL_DEVICE_ERROR_FLAGS_CALIBRATION_RUNNING
#endif

  enum {
    GIMBAL_DEVICE_FLAGS_RETRACT = 1u,
    GIMBAL_DEVICE_FLAGS_NEUTRAL = 2u,
    GIMBAL_DEVICE_FLAGS_ROLL_LOCK = 4u,
    GIMBAL_DEVICE_FLAGS_PITCH_LOCK = 8u,
    GIMBAL_DEVICE_FLAGS_YAW_LOCK = 16u,
    GIMBAL_DEVICE_ERROR_FLAGS_AT_ROLL_LIMIT = 1u,
    GIMBAL_DEVICE_ERROR_FLAGS_AT_PITCH_LIMIT = 2u,
    GIMBAL_DEVICE_ERROR_FLAGS_AT_YAW_LIMIT = 4u,
    GIMBAL_DEVICE_ERROR_FLAGS_ENCODER_ERROR = 8u,
    GIMBAL_DEVICE_ERROR_FLAGS_POWER_ERROR = 16u,
    GIMBAL_DEVICE_ERROR_FLAGS_MOTOR_ERROR = 32u,
    GIMBAL_DEVICE_ERROR_FLAGS_SOFTWARE_ERROR = 64u,
    GIMBAL_DEVICE_ERROR_FLAGS_COMMS_ERROR = 128u,
    GIMBAL_DEVICE_ERROR_FLAGS_CALIBRATION_RUNNING = 256u,
  };


  typedef boost::shared_ptr< ::mavros_msgs::GimbalDeviceAttitudeStatus_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mavros_msgs::GimbalDeviceAttitudeStatus_<ContainerAllocator> const> ConstPtr;

}; // struct GimbalDeviceAttitudeStatus_

typedef ::mavros_msgs::GimbalDeviceAttitudeStatus_<std::allocator<void> > GimbalDeviceAttitudeStatus;

typedef boost::shared_ptr< ::mavros_msgs::GimbalDeviceAttitudeStatus > GimbalDeviceAttitudeStatusPtr;
typedef boost::shared_ptr< ::mavros_msgs::GimbalDeviceAttitudeStatus const> GimbalDeviceAttitudeStatusConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mavros_msgs::GimbalDeviceAttitudeStatus_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mavros_msgs::GimbalDeviceAttitudeStatus_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mavros_msgs::GimbalDeviceAttitudeStatus_<ContainerAllocator1> & lhs, const ::mavros_msgs::GimbalDeviceAttitudeStatus_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.target_system == rhs.target_system &&
    lhs.target_component == rhs.target_component &&
    lhs.flags == rhs.flags &&
    lhs.q == rhs.q &&
    lhs.angular_velocity_x == rhs.angular_velocity_x &&
    lhs.angular_velocity_y == rhs.angular_velocity_y &&
    lhs.angular_velocity_z == rhs.angular_velocity_z &&
    lhs.failure_flags == rhs.failure_flags;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mavros_msgs::GimbalDeviceAttitudeStatus_<ContainerAllocator1> & lhs, const ::mavros_msgs::GimbalDeviceAttitudeStatus_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mavros_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::mavros_msgs::GimbalDeviceAttitudeStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mavros_msgs::GimbalDeviceAttitudeStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mavros_msgs::GimbalDeviceAttitudeStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mavros_msgs::GimbalDeviceAttitudeStatus_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mavros_msgs::GimbalDeviceAttitudeStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mavros_msgs::GimbalDeviceAttitudeStatus_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mavros_msgs::GimbalDeviceAttitudeStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1fa324570393b1fbb776c5ff6e00764e";
  }

  static const char* value(const ::mavros_msgs::GimbalDeviceAttitudeStatus_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1fa324570393b1fbULL;
  static const uint64_t static_value2 = 0xb776c5ff6e00764eULL;
};

template<class ContainerAllocator>
struct DataType< ::mavros_msgs::GimbalDeviceAttitudeStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mavros_msgs/GimbalDeviceAttitudeStatus";
  }

  static const char* value(const ::mavros_msgs::GimbalDeviceAttitudeStatus_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mavros_msgs::GimbalDeviceAttitudeStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# MAVLink message: GIMBAL_DEVICE_ATTITUDE_STATUS\n"
"# https://mavlink.io/en/messages/common.html#GIMBAL_DEVICE_ATTITUDE_STATUS\n"
"\n"
"std_msgs/Header header\n"
"\n"
"uint8 target_system             # System ID\n"
"uint8 target_component          # Component ID\n"
"\n"
"uint16 flags                    # Current gimbal flags set (bitwise) - See GIMBAL_DEVICE_FLAGS\n"
"#GIMBAL_DEVICE_FLAGS\n"
"uint16 GIMBAL_DEVICE_FLAGS_RETRACT = 1      # Set to retracted safe position (no stabilization), takes presedence over all other flags.\n"
"uint16 GIMBAL_DEVICE_FLAGS_NEUTRAL = 2      # Set to neutral/default position, taking precedence over all other flags except RETRACT. Neutral is commonly forward-facing and horizontal (pitch=yaw=0) but may be any orientation.\n"
"uint16 GIMBAL_DEVICE_FLAGS_ROLL_LOCK = 4    # Lock roll angle to absolute angle relative to horizon (not relative to drone). This is generally the default with a stabilizing gimbal.\n"
"uint16 GIMBAL_DEVICE_FLAGS_PITCH_LOCK = 8   # Lock pitch angle to absolute angle relative to horizon (not relative to drone). This is generally the default.\n"
"uint16 GIMBAL_DEVICE_FLAGS_YAW_LOCK = 16    # Lock yaw angle to absolute angle relative to North (not relative to drone). If this flag is set, the quaternion is in the Earth frame with the x-axis pointing North (yaw absolute). If this flag is not set, the quaternion frame is in the Earth frame rotated so that the x-axis is pointing forward (yaw relative to vehicle).\n"
"\n"
"geometry_msgs/Quaternion q      # Quaternion, x, y, z, w (0 0 0 1 is the null-rotation, the frame is depends on whether the flag GIMBAL_DEVICE_FLAGS_YAW_LOCK is set)\n"
"float32 angular_velocity_x      # X component of angular velocity (NaN if unknown)\n"
"float32 angular_velocity_y      # Y component of angular velocity (NaN if unknown)\n"
"float32 angular_velocity_z      # Z component of angular velocity (NaN if unknown)\n"
"\n"
"uint32 failure_flags            # Failure flags (0 for no failure) (bitwise) - See GIMBAL_DEVICE_ERROR_FLAGS\n"
"#GIMBAL_DEVICE_ERROR_FLAGS\n"
"uint32 GIMBAL_DEVICE_ERROR_FLAGS_AT_ROLL_LIMIT = 1          # Gimbal device is limited by hardware roll limit.\n"
"uint32 GIMBAL_DEVICE_ERROR_FLAGS_AT_PITCH_LIMIT = 2         # Gimbal device is limited by hardware pitch limit.\n"
"uint32 GIMBAL_DEVICE_ERROR_FLAGS_AT_YAW_LIMIT = 4           # Gimbal device is limited by hardware yaw limit.\n"
"uint32 GIMBAL_DEVICE_ERROR_FLAGS_ENCODER_ERROR = 8          # There is an error with the gimbal encoders.\n"
"uint32 GIMBAL_DEVICE_ERROR_FLAGS_POWER_ERROR = 16           # There is an error with the gimbal power source.\n"
"uint32 GIMBAL_DEVICE_ERROR_FLAGS_MOTOR_ERROR = 32           # There is an error with the gimbal motor's.\n"
"uint32 GIMBAL_DEVICE_ERROR_FLAGS_SOFTWARE_ERROR = 64        # There is an error with the gimbal's software.\n"
"uint32 GIMBAL_DEVICE_ERROR_FLAGS_COMMS_ERROR = 128          # There is an error with the gimbal's communication.\n"
"uint32 GIMBAL_DEVICE_ERROR_FLAGS_CALIBRATION_RUNNING = 256  # Gimbal is currently calibrating.\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
;
  }

  static const char* value(const ::mavros_msgs::GimbalDeviceAttitudeStatus_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mavros_msgs::GimbalDeviceAttitudeStatus_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.target_system);
      stream.next(m.target_component);
      stream.next(m.flags);
      stream.next(m.q);
      stream.next(m.angular_velocity_x);
      stream.next(m.angular_velocity_y);
      stream.next(m.angular_velocity_z);
      stream.next(m.failure_flags);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GimbalDeviceAttitudeStatus_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mavros_msgs::GimbalDeviceAttitudeStatus_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mavros_msgs::GimbalDeviceAttitudeStatus_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "target_system: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.target_system);
    s << indent << "target_component: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.target_component);
    s << indent << "flags: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.flags);
    s << indent << "q: ";
    s << std::endl;
    Printer< ::geometry_msgs::Quaternion_<ContainerAllocator> >::stream(s, indent + "  ", v.q);
    s << indent << "angular_velocity_x: ";
    Printer<float>::stream(s, indent + "  ", v.angular_velocity_x);
    s << indent << "angular_velocity_y: ";
    Printer<float>::stream(s, indent + "  ", v.angular_velocity_y);
    s << indent << "angular_velocity_z: ";
    Printer<float>::stream(s, indent + "  ", v.angular_velocity_z);
    s << indent << "failure_flags: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.failure_flags);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MAVROS_MSGS_MESSAGE_GIMBALDEVICEATTITUDESTATUS_H
